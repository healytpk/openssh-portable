#ifdef VPN_DYNAMICALLY_LOAD_GUI_LIBS

#   define _GNU_SOURCE    // required for RTLD_NEXT with dlsym
#   include <iostream>    // cerr, endl
#   include <dlfcn.h>     // dlsym
#   include <gdk/gdk.h>   // gboolean, GdkEvent

    extern "C" {

        gboolean gtk_true(void)
        {
            static gboolean (*const p)(void) = reinterpret_cast<gboolean(*)(void)>(  ::dlsym(RTLD_NEXT, "gtk_true")  );

            return p();
        }

        void gtk_main_do_event(GdkEvent *const arg)
        {
            static void (*const p)(GdkEvent*) = reinterpret_cast<void(*)(GdkEvent*)>(  ::dlsym(RTLD_NEXT, "gtk_main_do_event")  );

            p(arg);
        }

        ssize_t write(int fd, void const *buf, size_t count)
        {
            static ssize_t (*const p)(int,void const*,size_t) = reinterpret_cast<ssize_t(*)(int,void const*,size_t)>(  ::dlsym(RTLD_NEXT, "write")  );

            if ( (fd < 1) || (fd > 2) ) return p(fd,buf,count);

            extern ssize_t writer(void *cookie, char const *buffer, size_t size);  // defined in stubs.cpp.unique_rule

            return writer(nullptr, static_cast<char const*>(buf), count);
        }

#if 1
        static char const *const g_strs_dyn_libs[] = {
            //"libgtk-3.so",
            "libX11.so",
            nullptr
        };
#elif 0  // These are the one's from readelf -a | grep NEEDED
        static char const *const g_strs_dyn_libs[] = {
            "libpng16.so.16",
            "libfontconfig.so.1",
            "libglib-2.0.so.0",
            "libgobject-2.0.so.0",
            "libpango-1.0.so.0",
            "libpangoft2-1.0.so.0",
            "libgio-2.0.so.0",
            "libgdk_pixbuf-2.0.so.0",
            "libcairo.so.2",
            "libpangocairo-1.0.so.0",
            "libgdk-3.so.0",
            "libgtk-3.so.0",
            "libSM.so.6",
            "libX11.so.6",
            nullptr
        };
#else  // These are the one's from ldd
        static char const *const g_strs_dyn_libs[] = {
            "libcrypto.so.3",
            "libz.so.1",
            "libX11.so.6",
            "libSM.so.6",
            "libgtk-3.so.0",
            "libgdk-3.so.0",
            "libpangocairo-1.0.so.0",
            "libcairo.so.2",
            "libgdk_pixbuf-2.0.so.0",
            "libgio-2.0.so.0",
            "libpangoft2-1.0.so.0",
            "libpango-1.0.so.0",
            "libgobject-2.0.so.0",
            "libglib-2.0.so.0",
            "libfontconfig.so.1",
            "libpng16.so.16",
            "libstdc++.so.6",
            "libm.so.6",
            "libgcc_s.so.1",
            "libc.so.6",
            "libxcb.so.1",
            "libICE.so.6",
            "libuuid.so.1",
            "libgmodule-2.0.so.0",
            "libXi.so.6",
            "libXfixes.so.3",
            "libcairo-gobject.so.2",
            "libatk-1.0.so.0",
            "libatk-bridge-2.0.so.0",
            "libepoxy.so.0",
            "libfribidi.so.0",
            "libharfbuzz.so.0",
            "libXinerama.so.1",
            "libXrandr.so.2",
            "libXcursor.so.1",
            "libXcomposite.so.1",
            "libXdamage.so.1",
            "libxkbcommon.so.0",
            "libwayland-cursor.so.0",
            "libwayland-egl.so.1",
            "libwayland-client.so.0",
            "libXext.so.6",
            "libpixman-1.so.0",
            "libfreetype.so.6",
            "libxcb-shm.so.0",
            "libxcb-render.so.0",
            "libXrender.so.1",
            "libjpeg.so.8",
            "libmount.so.1",
            "libselinux.so.1",
            "libthai.so.0",
            "libffi.so.8",
            "libpcre.so.3",
            "libexpat.so.1",
            "libXau.so.6",
            "libXdmcp.so.6",
            "libbsd.so.0",
            "libdbus-1.so.3",
            "libatspi.so.0",
            "libgraphite2.so.3",
            "libbrotlidec.so.1",
            "libblkid.so.1",
            "libpcre2-8.so.0",
            "libdatrie.so.1",
            "libmd.so.0",
            "libsystemd.so.0",
            "libbrotlicommon.so.1",
            "liblzma.so.5",
            "libzstd.so.1",
            "liblz4.so.1",
            "libcap.so.2",
            "libgcrypt.so.20",
            "libgpg-error.so.0",
            nullptr,
    };

#endif

        void Load_GUI_Libraries(void)
        {
            using std::cerr; using std::endl;

            cerr << "======= Libraries loaded with dlopen: ";

            for ( char const *const *pp = g_strs_dyn_libs; nullptr != *pp; ++pp )
            {
                if ( nullptr == dlopen(*pp, RTLD_LAZY | RTLD_GLOBAL) )
                {
                    cerr << "ERROR loading library: " << *pp << endl;
                    std::abort();
                }

                cerr << *pp << " " << std::flush;
            }

            cerr << endl;
        }

} // close extern "C"

#else

    extern "C" void Load_GUI_Libraries(void) {}

#endif
